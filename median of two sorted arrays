class Solution {
public:
    double findKth(vector<int>& nums1, int aL,int aR, vector<int>& nums2, int bL, int bR, int k)
    {
        if(aL > aR) return nums2[bL+k-1];
        if(bL > bR) return nums1[aL+k-1];
        
        int aMid = (aL+aR)/2;
        int bMid = (bL+bR)/2;
        
        if( nums1[aMid] <= nums2[bMid])
        {
            if( k <= ( (aMid-aL) + (bMid-bL) +1))
            {
                return findKth(nums1, aL, aR, nums2, bL, bMid-1, k );
            }
            else{
                
                return findKth(nums1,aMid+1, aR, nums2, bL, bR, (k-aMid-1+aL));
            }
        }
        else
        {
            if( k <= ( (aMid-aL) + (bMid-bL) +1 ))
            {
                return findKth(nums1, aL, aMid-1, nums2, bL,bR,k);
            }
            else
            {
                return findKth(nums1, aL, aR, nums2, bMid+1, bR, (k-bMid-1+bL));
            }
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        
        int k = (m+n+1)/2;
        
        double v = (double)findKth(nums1,0,m-1,nums2,0,n-1,k);
        
        if( (m+n)%2 == 0)
        {
            int k2 = k+1;
            double v2 = (double)findKth(nums1,0,m-1,nums2,0,n-1,k2);
            v = (v+v2)/2.0;
        }
        
        return v;
    }
    

};
