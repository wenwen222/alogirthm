You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* t1;
        ListNode* t2;
        ListNode* result = NULL;
        ListNode* t3;
        t1 = l1;
        t2 = l2;
        t3 = result;
        
        if( t1 || t2)
        {
            
            
            t3 = result;
            int value = 0;
            int bit = 0;
            while (t1 || t2 || (bit == 1))
            {
                value = bit;
                
                if( t1 )
                {
                    value += t1->val;
                    t1 = t1->next;
                }
                
                if(t2)
                {
                    value+= t2->val;
                    t2 = t2->next;
                }
                
                if( value >= 10 )
                {
                    bit = 1;
                    value-=10;
                }
                else
                {
                    bit = 0;
                }
                ListNode* node = new ListNode(value);
            
                if( t3)
                {
                   t3->next = node;
                   t3 = t3->next;
                }
                else
                {
                    t3 = node;
                    result = t3;
                }

            }

        }
        
        return result;
    }
};
